from aiogram import Router, Bot
from aiogram.types import ErrorEvent
from config import ADMIN_CHAT_ID
import traceback
import logging

logger = logging.getLogger(__name__)

error_router = Router(name=__name__)


@error_router.error()
async def error_handler(event: ErrorEvent, bot:Bot):
    """
    –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ –≤ –±–æ—Ç–µ
    """
    logger.error(f"Error: {event.exception}", exc_info=True)
    error_message = "üö® <b>–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:</b>\n\n"
    error_message += f"<b>–¢–∏–ø:</b> {type(event.exception).__name__}\n"
    error_message += f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {str(event.exception)}\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    if event.update.message:
        msg = event.update.message
        error_message += f"<b>–¢–∏–ø —Å–æ–±—ã—Ç–∏—è:</b> message\n"
        error_message += f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {msg.from_user.id}"
        if msg.from_user.username:
            error_message += f" (@{msg.from_user.username})"
        error_message += f"\n<b>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</b> {msg.text or '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞'}\n"
    elif event.update.callback_query:
        cb = event.update.callback_query
        error_message += f"<b>–¢–∏–ø —Å–æ–±—ã—Ç–∏—è:</b> callback_query\n"
        error_message += f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {cb.from_user.id}"
        if cb.from_user.username:
            error_message += f" (@{cb.from_user.username})"
        error_message += f"\n<b>Callback data:</b> {cb.data}\n"
    
    # Traceback
    tb = traceback.format_exc()
    if len(tb) > 2000:
        tb = tb[:2000] + "\n... (–æ–±—Ä–µ–∑–∞–Ω–æ)"
    error_message += f"\n<code>{tb}</code>"
    
    try:
        await bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=error_message,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Failed to send error message to admin: {e}")
    return True